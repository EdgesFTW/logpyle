#! /usr/bin/env python

import sqlite3


def main() -> None:
    import argparse

    parser = argparse.ArgumentParser(description="Upgrade an existing database\
            file to version 3")
    parser.add_argument("dbfiles", nargs="+", type=str,
                        help="database file(s) to read")
    parser.add_argument("--suffix", type=str,
                        help="""a suffix to append to the filename of the
                        newly upgraded database file""")

    args = parser.parse_args()

    if not args.suffix:
        args.suffix = "_upgrade"

    for dbfile in args.dbfiles:
        new_db = upgrade_gathered_db(dbfile, suffix=args.suffix)

        new_db.commit()


def upgrade_gathered_db(dbfile: str, suffix: str) -> sqlite3.Connection:

    old_conn = sqlite3.connect(dbfile)

    tmp = old_conn.execute("select * from warnings").description
    warning_columns = [col[0] for col in tmp]
    print(warning_columns)

    # seperate the filename and the extention
    filename, file_ext = dbfile.rsplit(".", 1)

    new_conn_name = filename + suffix + "." + file_ext

    with open(dbfile, "rb") as f:
        with open(new_conn_name, "wb") as f1:
            f1.write(f.read())

    new_conn = sqlite3.connect(new_conn_name)

    print(f"Creating new Database: {new_conn_name}, a clone of {dbfile}")

    print(f"Upgrading {new_conn_name} to schema version 3")

    # ensure that warnings table has unixtime column
    if ("unixtime" not in warning_columns):
        print("Adding a unixtime column in the warnings table")
        new_conn.execute("""
                         ALTER TABLE warnings
                            ADD unixtime integer DEFAULT -1;
                         """)

    # ensure that warnings table has rank column
    if ("rank" not in warning_columns):
        print("Adding a rank column in the warnings table")
        new_conn.execute("""
                         ALTER TABLE warnings
                            ADD rank integer DEFAULT -1;
                         """)

    print("Ensuring a logging table exists")
    new_conn.execute("""
      CREATE TABLE IF NOT EXISTS logging (
        run_id integer,
        rank integer,
        step integer,
        unixtime integer,
        level text,
        message text,
        filename text,
        lineno integer
        )""")

    return new_conn


if __name__ == "__main__":
    main()
