#!/usr/bin/env python

import shutil
import sqlite3


def main() -> None:
    import argparse

    parser = argparse.ArgumentParser(description="Upgrade an existing database\
            file to version 3")
    parser.add_argument("dbfiles", nargs="+", type=str,
                        help="database file(s) to read")
    parser.add_argument("--overwrite", action="store_true",
                        help="""overwrite the passed in database file""")
    parser.add_argument("--suffix", type=str, required=False,
                        help="""a suffix to append to the filename of the
                        newly upgraded database file""")

    args = parser.parse_args()

    if args.overwrite and args.suffix:
        raise argparse.ArgumentError(
                argument=None,
                message="Cannot overwrite file and use a suffix"
                )

    if args.suffix == "":
        raise NameError("Specify non-empty suffix, "
                        "overwriting db files is performed with "
                        "the flag '--overwrite'")

    suffix = args.suffix or "_upgrade"

    for dbfile in args.dbfiles:
        new_db = upgrade_db(
                dbfile, suffix=suffix, overwrite=args.overwrite
                )

        new_db.commit()


def upgrade_db(
        dbfile: str, suffix: str, overwrite: bool
        ) -> sqlite3.Connection:

    old_conn = sqlite3.connect(dbfile)

    tmp = old_conn.execute("select * from warnings").description
    warning_columns = [col[0] for col in tmp]

    if overwrite:
        new_conn_name = dbfile
        new_conn = old_conn
        print(f"Overwriting Database: {new_conn_name}")

    else:
        # seperate the filename and the extention
        filename, file_ext = dbfile.rsplit(".", 1)

        new_conn_name = filename + suffix + "." + file_ext

        shutil.copy(dbfile, new_conn_name)

        new_conn = sqlite3.connect(new_conn_name)

        print(f"Creating new Database: {new_conn_name}, a clone of {dbfile}")

    print(f"Upgrading {new_conn_name} to schema version 3")

    # ensure that warnings table has unixtime column
    if ("unixtime" not in warning_columns):
        print("Adding a unixtime column in the warnings table")
        new_conn.execute("""
                         ALTER TABLE warnings
                            ADD unixtime integer DEFAULT NULL;
                         """)

    # ensure that warnings table has rank column
    if ("rank" not in warning_columns):
        print("Adding a rank column in the warnings table")
        new_conn.execute("""
                         ALTER TABLE warnings
                            ADD rank integer DEFAULT NULL;
                         """)

    print("Ensuring a logging table exists")
    new_conn.execute("""
      CREATE TABLE IF NOT EXISTS logging (
        run_id integer,
        rank integer,
        step integer,
        unixtime integer,
        level text,
        message text,
        filename text,
        lineno integer
        )""")

    return new_conn


if __name__ == "__main__":
    main()
